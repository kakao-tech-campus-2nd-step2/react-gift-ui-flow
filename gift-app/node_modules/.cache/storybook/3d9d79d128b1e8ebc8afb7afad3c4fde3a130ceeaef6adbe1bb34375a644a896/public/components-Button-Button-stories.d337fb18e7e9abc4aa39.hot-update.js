"use strict";
globalThis["webpackHotUpdategift_app"]("components-Button-Button-stories",{

/***/ "./src/components/Button/Button.tsx":
/*!******************************************!*\
  !*** ./src/components/Button/Button.tsx ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button)
/* harmony export */ });
Object(function webpackMissingModule() { var e = new Error("Cannot find module './'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/a/qqu/kateCam/step2/week2/react-gift-ui-flow/gift-app/src/components/Button/Button.tsx";


const Button = ({
  primary = false,
  size = 'medium',
  backgroundColor = '',
  label,
  theme,
  ...props
}) => {
  let themeType = '';
  switch (theme) {
    case 'Con':
      themeType = 'button--con';
      break;
    case 'Muji':
      themeType = 'button--muji';
      break;
    case 'JayG':
      themeType = 'button--jayg';
      break;
    default:
      themeType = '';
  }

  // mode 변수에서 결정한 primary prop의 값에 따라 CSS 적용
  const mode = primary ? 'button--primary' : 'button--secondary';
  const sizeClass = size === 'responsive' ? 'button--responsive' : `button--${size}`;
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("button", {
    type: "button",
    className: ['button', sizeClass, mode, themeType].join(' '),
    style: {
      backgroundColor
    },
    ...props,
    children: label
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 40,
    columnNumber: 5
  }, undefined);
};
_c = Button;
;
Button.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Button",
  "props": {
    "primary": {
      "required": false,
      "tsType": {
        "name": "boolean"
      },
      "description": "",
      "defaultValue": {
        "value": "false",
        "computed": false
      }
    },
    "backgroundColor": {
      "required": false,
      "tsType": {
        "name": "string"
      },
      "description": "",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "size": {
      "required": false,
      "tsType": {
        "name": "union",
        "raw": "'small' | 'medium' | 'large'| 'responsive'",
        "elements": [{
          "name": "literal",
          "value": "'small'"
        }, {
          "name": "literal",
          "value": "'medium'"
        }, {
          "name": "literal",
          "value": "'large'"
        }, {
          "name": "literal",
          "value": "'responsive'"
        }]
      },
      "description": "",
      "defaultValue": {
        "value": "'medium'",
        "computed": false
      }
    },
    "label": {
      "required": true,
      "tsType": {
        "name": "string"
      },
      "description": ""
    },
    "onClick": {
      "required": false,
      "tsType": {
        "name": "signature",
        "type": "function",
        "raw": "() => void",
        "signature": {
          "arguments": [],
          "return": {
            "name": "void"
          }
        }
      },
      "description": ""
    },
    "theme": {
      "required": false,
      "tsType": {
        "name": "union",
        "raw": "'Con' | 'Muji' | 'JayG'",
        "elements": [{
          "name": "literal",
          "value": "'Con'"
        }, {
          "name": "literal",
          "value": "'Muji'"
        }, {
          "name": "literal",
          "value": "'JayG'"
        }]
      },
      "description": ""
    }
  }
};
var _c;
__webpack_require__.$Refresh$.register(_c, "Button");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});
//# sourceMappingURL=components-Button-Button-stories.d337fb18e7e9abc4aa39.hot-update.js.map