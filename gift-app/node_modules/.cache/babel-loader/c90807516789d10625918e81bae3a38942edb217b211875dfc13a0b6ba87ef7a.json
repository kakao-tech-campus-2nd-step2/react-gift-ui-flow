{"ast":null,"code":"var _jsxFileName = \"/Users/a/qqu/kateCam/step2/week2/react-gift-ui-flow/gift-app/src/hooks/LoginContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginContext = /*#__PURE__*/createContext(undefined);\nexport const LoginProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const login = () => setIsLoggedIn(true);\n  const logout = () => setIsLoggedIn(false);\n  const value = useMemo(() => ({\n    isLoggedIn,\n    login,\n    logout\n  }), [isLoggedIn]);\n  return /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginProvider, \"b786p8EGqErWP0W/BkklGbguj1M=\");\n_c = LoginProvider;\nexport const useLogin = () => {\n  _s2();\n  const context = useContext(LoginContext);\n  if (!context) {\n    throw new Error('useLogin은 LoginProvider 내에서 사용해야 합니다.');\n  }\n  return context;\n};\n_s2(useLogin, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LoginProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useMemo","jsxDEV","_jsxDEV","LoginContext","undefined","LoginProvider","children","_s","isLoggedIn","setIsLoggedIn","login","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLogin","_s2","context","Error","$RefreshReg$"],"sources":["/Users/a/qqu/kateCam/step2/week2/react-gift-ui-flow/gift-app/src/hooks/LoginContext.tsx"],"sourcesContent":["import { createContext, useState, ReactNode, useContext, useMemo } from 'react';\n\ninterface LoginContextProps {\n  isLoggedIn: boolean;\n  login: () => void;\n  logout: () => void;\n}\n\nconst LoginContext = createContext<LoginContextProps | undefined>(undefined);\n\ninterface LoginProviderProps {\n  children: ReactNode;\n}\n\nexport const LoginProvider = ({ children }: LoginProviderProps) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const login = () => setIsLoggedIn(true);\n  const logout = () => setIsLoggedIn(false);\n\n  const value = useMemo(() => ({ isLoggedIn, login, logout }), [isLoggedIn]);\n\n  return (\n    <LoginContext.Provider value={value}>\n      {children}\n    </LoginContext.Provider>\n  );\n};\n\nexport const useLogin = () => {\n  const context = useContext(LoginContext);\n  if (!context) {\n    throw new Error('useLogin은 LoginProvider 내에서 사용해야 합니다.');\n  }\n  return context;\n};"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAaC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQhF,MAAMC,YAAY,gBAAGN,aAAa,CAAgCO,SAAS,CAAC;AAM5E,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAA6B,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMY,KAAK,GAAGA,CAAA,KAAMD,aAAa,CAAC,IAAI,CAAC;EACvC,MAAME,MAAM,GAAGA,CAAA,KAAMF,aAAa,CAAC,KAAK,CAAC;EAEzC,MAAMG,KAAK,GAAGZ,OAAO,CAAC,OAAO;IAAEQ,UAAU;IAAEE,KAAK;IAAEC;EAAO,CAAC,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAE1E,oBACEN,OAAA,CAACC,YAAY,CAACU,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAN,QAAA,EACjCA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACV,EAAA,CAbWF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAe1B,OAAO,MAAMc,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGtB,UAAU,CAACI,YAAY,CAAC;EACxC,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;EAC1D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}